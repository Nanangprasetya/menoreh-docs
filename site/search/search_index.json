{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#setting-up-navigation","title":"Setting up navigation","text":"<p>A clear and concise navigation structure is an important aspect of good project  documentation. Material for MkDocs provides a multitude of options to configure the behavior of navigational elements, including tabs and [sections], and one of its flag-ship feature: instant loading.</p>"},{"location":"#configuration","title":"Configuration","text":""},{"location":"#instant-loading","title":"Instant loading","text":"<p> 5.0.0 \u00b7  Feature flag</p> <p>When instant loading is enabled, clicks on all internal links will be intercepted and dispatched via XHR without fully reloading the page. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.instant\n</code></pre> <p>The resulting page is parsed and injected and all event handlers and components are rebound automatically, i.e., Material for MkDocs now behaves like a Single Page Application. Now, the search index survives navigation, which is especially useful for large documentation sites.</p>"},{"location":"#anchor-tracking","title":"Anchor tracking","text":"<p> 8.0.0 \u00b7  Feature flag</p> <p>When anchor tracking is enabled, the URL in the address bar is automatically updated with the active anchor as highlighted in the table of contents. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.tracking\n</code></pre>"},{"location":"#navigation-tabs","title":"Navigation tabs","text":"<p>[ 1.1.0][Navigation tabs support] \u00b7  Feature flag</p> <p>When tabs are enabled, top-level sections are rendered in a menu layer below the header for viewports above <code>1220px</code>, but remain as-is on mobile.1 Add the following lines to <code>mkdocs.yml</code>:</p>   <ol> <li> <p>Prior to  6.2.0, navigation tabs had a slightly different behavior. All top-level pages (i.e. all top-level entries directly refefring to a <code>*.md</code> file) defined inside the <code>nav</code> entry of <code>mkdocs.yml</code> were grouped under the first tab which received the title of the first page. This made it impossible to include a top-level page (or external link) as a tab item, as was reported in #1884 and #2072. From  6.2.0 on, navigation tabs include all top-level pages and sections.\u00a0\u21a9</p> </li> </ol>"},{"location":"documentation/getting_started/","title":"Getting Started","text":"<p>Menoreh library adalah open source yang dikkembangkan oleh Panemu Solusi Industri.</p>"},{"location":"documentation/getting_started/#overview","title":"Overview","text":"<ul> <li>[Colors]</li> <li>Admonition</li> <li>[Arithmatex]</li> </ul>  <p>Menoreh Library terdiri dari beberapa pub package :</p>    Package Description     <code>form_inputs</code> Input validation   <code>menoreh_domain</code> Domain resource   <code>menoreh_data</code> Data resource     <p>Warning</p> <p>Untuk sekarang tampilan Menoreh Library berkerja layout Website</p>"},{"location":"documentation/getting_started/#installation","title":"Installation","text":"<p>For help getting started with Flutter, view our online documentation.</p> <ul> <li>Flutter version : <code>3.0.5</code></li> <li>Dart version : <code>2.17.6</code></li> </ul> <p>Step 1:</p> <p>Clone or download this repo by using the code below:</p> <pre><code>git clone https://github.com/Nanangprasetya/solid_principle_flutter.git\n</code></pre> <p>Step 2:</p> <p>Go to project root and execute the following command in console to get the required dependencies:</p> <pre><code>flutter pub get\n</code></pre> <p>Step 3:</p> <p>Run the Flavor:</p> <pre><code>flutter run --flavor development --target main_development.dart\nflutter run --flavor production --target main_production.dart\n</code></pre>"},{"location":"documentation/component/action/checkboxes/","title":"Checkboxs","text":"<p>Checkboxes allow users to select one or more items from a set. Checkboxes can turn an option on or off.</p>"},{"location":"documentation/component/action/checkboxes/#checkbox-default","title":"Checkbox Default","text":"DesignImplementation      <pre><code>Checkbox(\n    value: false,\n    onChanged: (bool? value) {},\n)\n</code></pre>"},{"location":"documentation/component/action/checkboxes/#checkbox-list-tile","title":"Checkbox List Tile","text":"DesignImplementation      <pre><code>CheckboxListTile(\n  onChanged:(bool? value) { },\n  value: true,\n  title: const Text('Checkbox Title'),\n),\n</code></pre>"},{"location":"documentation/component/action/checkboxes/#customization","title":"Customization","text":"<p>To change the whole Button Theme, please open the <code>core/themes/app_theme.dart</code>. Here's how to change the Widget Radio Chackboxs theme:</p> <pre><code>checkboxTheme: CheckboxThemeData(\n    fillColor: MaterialStateProperty.resolveWith&lt;Color&gt;((Set&lt;MaterialState&gt; states) {\n    if (states.contains(MaterialState.selected)) {\n        return AppColors.secondary;\n    } else if (states.contains(MaterialState.hovered)) {\n        return AppColors.splash;\n    }\n    return AppColors.fillPrimary;\n    }),\n),\n</code></pre>"},{"location":"documentation/component/action/common_button/","title":"Common Button","text":"<p>Buttons allow users to take actions, and make choices, with a single tap.</p> <p>Button di Menoreh Library menggunakan Tema Matrial design v2. Button terdiri dari Widget <code>ElevatedButton</code>, <code>OutlinedButton</code> dan <code>TextButton</code>.</p> <p>Untuk mengubah semua Tema button silahkan pelajari berikut ini.</p>"},{"location":"documentation/component/action/common_button/#elevated-button","title":"Elevated Button","text":"DesignImplementation      <pre><code>ElevatedButton(\n    onPressed: (){}\n    child: const Text('Text Button'),\n),\n</code></pre>  Info <p>Untuk mengubah warna Button silahkan tambahkan parameter <code>style</code> didalam <code>ElevatedButton</code></p> <pre><code>style: ElevatedButton.styleFrom(\n    backgroundColor: AppColors.green,\n    foregroundColor: AppColors.white,\n),\n</code></pre>     <p>Elevated Icon Button</p> DesignImplementation      <pre><code>ElevatedButton.icon(\n    onPressed: (){}\n    icon: const Icon(Icons.add),\n    label: const Text('Title Button'),\n  ),\n),\n</code></pre>  Info <p>Untuk mengubah warna Button silahkan tambahkan parameter <code>style</code> didalam <code>ElevatedButton.icon</code></p> <pre><code>style: ElevatedButton.styleFrom(\n    backgroundColor: AppColors.green,\n    foregroundColor: AppColors.white,\n),\n</code></pre>"},{"location":"documentation/component/action/common_button/#outlined-button","title":"Outlined Button","text":"DesignImplementation      <pre><code>OutlinedButton(\n    onPressed: (){}\n    child: const Text('Text Button'),\n),\n</code></pre>  Info <p>Untuk mengubah warna Button silahkan tambahkan parameter <code>style</code> didalam <code>OutlinedButton</code></p> <pre><code>style: OutlinedButton.styleFrom(\n    backgroundColor: AppColors.green,\n    foregroundColor: AppColors.white,\n),\n</code></pre>     <p>Outlined Icon Button</p> DesignImplementation      <pre><code>OutlinedButton.icon(\n    onPressed: (){}\n    icon: const Icon(Icons.add),\n    label: const Text('Title Button'),\n  ),\n),\n</code></pre>  Info <p>Untuk mengubah warna Button silahkan tambahkan parameter <code>style</code> didalam <code>OutlinedButton.icon</code></p> <pre><code>style: OutlinedButton.styleFrom(\n    backgroundColor: AppColors.green,\n    foregroundColor: AppColors.white,\n),\n</code></pre>"},{"location":"documentation/component/action/common_button/#text-button","title":"Text Button","text":"DesignImplementation      <pre><code>TextButton(\n    onPressed: (){}\n    child: const Text('Text Button'),\n),\n</code></pre>  Info <p>Untuk mengubah warna Button silahkan tambahkan parameter <code>style</code> didalam <code>TextButton</code></p> <pre><code>style: TextButton.styleFrom(\n    backgroundColor: AppColors.green,\n    foregroundColor: AppColors.white,\n),\n</code></pre>     <p>Text Icon Button</p> DesignImplementation      <pre><code>TextButton.icon(\n    onPressed: (){}\n    icon: const Icon(Icons.add),\n    label: const Text('Title Button'),\n  ),\n),\n</code></pre>  Info <p>Untuk mengubah warna Button silahkan tambahkan parameter <code>style</code> didalam <code>TextButton.icon</code></p> <pre><code>style: TextButton.styleFrom(\n    backgroundColor: AppColors.green,\n    foregroundColor: AppColors.white,\n),\n</code></pre>"},{"location":"documentation/component/action/common_button/#customization","title":"Customization","text":"<p>To change the whole Button Theme, please open the <code>core/themes/app_theme.dart</code>. Here's how to change the Widget Buttons theme:</p>"},{"location":"documentation/component/action/common_button/#elevated-button_1","title":"Elevated Button","text":"<pre><code> elevatedButtonTheme: ElevatedButtonThemeData(\n    style: ElevatedButton.styleFrom(\n    shape: const StadiumBorder(),\n    padding: const EdgeInsets.symmetric(horizontal: AppDimens.paddingLarge),\n    foregroundColor: AppColors.white,\n    backgroundColor: AppColors.primary,\n    minimumSize: Size(AppDimens.size8X, AppDimens.size3XL),\n    shadowColor: AppColors.transparant,\n    elevation: 0,\n    ),\n),\n</code></pre>"},{"location":"documentation/component/action/common_button/#outlined-button_1","title":"Outlined Button","text":"<pre><code>outlinedButtonTheme: OutlinedButtonThemeData(\n    style: OutlinedButton.styleFrom(\n        foregroundColor: AppColors.primary,\n        side: const BorderSide(width: 1.0, color: AppColors.primary),\n        shape: const StadiumBorder(),\n        padding: const EdgeInsets.symmetric(horizontal: AppDimens.paddingLarge),\n        minimumSize: Size(AppDimens.size8X, AppDimens.size3XL),\n        shadowColor: AppColors.transparant,\n        elevation: 0,\n    ),\n),\n</code></pre>"},{"location":"documentation/component/action/common_button/#text-button_1","title":"Text Button","text":"<pre><code>textButtonTheme: TextButtonThemeData(\n    style: TextButton.styleFrom(\n        shape: const StadiumBorder(),\n        padding: const EdgeInsets.symmetric(horizontal: AppDimens.paddingLarge),\n        foregroundColor: AppColors.primary,\n        minimumSize: Size(AppDimens.size8X, AppDimens.size3XL),\n        elevation: 0,\n    ),\n)\n</code></pre>"},{"location":"documentation/component/action/icon_button/","title":"Icon Button","text":"<p>Icon Button allow users to take actions, and make choices, with a single tap.</p>"},{"location":"documentation/component/action/icon_button/#default","title":"Default","text":"DesignImplementation      <p><pre><code>ElevatedButtonIcon(\n    onPressed: () {},\n    backgroundColor: AppColors.green,\n    icon: const Icon(Icons.add),\n    tooltip: 'Add',\n),\n</code></pre> Change the button type, for example <code>ElevatedButtonIcon</code> and <code>OutlinedButtonIcon</code>.  If you want to use an icon button without a background color, you can use <code>IconButton</code>.</p> <pre><code>IconButton(\n    onPressed: () {},\n    icon: const Icon(Icons.add),\n),\n</code></pre>"},{"location":"documentation/component/action/icon_button/#icon-close-button","title":"Icon Close Button","text":"DesignImplementation      <pre><code>IconCloseButton(\n    onPressed: () {},\n),\n</code></pre>  <p>Info</p> <p><code>IconCloseButton</code> is usually used for Dialog.</p>"},{"location":"documentation/component/action/radio_button/","title":"Radio Button","text":"<p>Radio buttons allow users to select one option from a set.</p>"},{"location":"documentation/component/action/radio_button/#radio-list-tile","title":"Radio List Tile","text":"DesignImplementation      <pre><code>RadioListTile&lt;bool&gt;(\n  onChanged:(bool? value) { },\n  value: false,\n  title: const Text('Radio Title'),\n),\n</code></pre>"},{"location":"documentation/component/action/radio_button/#radio-button-multiple","title":"Radio Button Multiple","text":"DesignImplementation      <pre><code>Column(\n    children: [\n        Radio&lt;int&gt;(\n            value: 0,\n            groupValue: _groupValue,\n            onChanged: (int? value) {},\n        ),\n        Radio&lt;int&gt;(\n            value: 1,\n            groupValue: _groupValue,\n            onChanged: (int? value) {},\n        ),\n    ],\n)\n</code></pre>  <p>Info</p> <p><code>groupValue</code> The currently selected value for a group of radio buttons.</p>"},{"location":"documentation/component/action/radio_button/#customization","title":"Customization","text":"<p>To change the whole Button Theme, please open the <code>core/themes/app_theme.dart</code>. Here's how to change the Widget Radio Button theme:</p> <pre><code>radioTheme: RadioThemeData(\n    fillColor: MaterialStateProperty.resolveWith&lt;Color&gt;((Set&lt;MaterialState&gt; states) {\n        if (states.contains(MaterialState.selected)) {\n        return AppColors.secondary;\n        } else if (states.contains(MaterialState.hovered)) {\n        return AppColors.splash;\n        }\n        return AppColors.fillPrimary;\n    }),\n),\n</code></pre>"},{"location":"documentation/component/action/switches/","title":"Switches","text":"<p>Switches toggle the state of a single item on or off.</p>"},{"location":"documentation/component/action/switches/#switches-default","title":"Switches Default","text":"DesignImplementation      <pre><code>Switch(\n  value: light,\n  onChanged: (bool value) {}\n\n)\n</code></pre>"},{"location":"documentation/component/action/switches/#checkbox-list-tile","title":"Checkbox List Tile","text":"DesignImplementation      <pre><code>SwitchListTile(\n  title: const Text('Switch Title'),\n  value: true,\n  onChanged:(bool? value) { },\n),\n</code></pre>"},{"location":"documentation/component/action/switches/#customization","title":"Customization","text":"<p>To change the whole Button Theme, please open the <code>core/themes/app_theme.dart</code>. Here's how to change the Widget Radio Switch theme:</p> <pre><code>switchTheme: SwitchThemeData(\n    fillColor: MaterialStateProperty.resolveWith&lt;Color&gt;((Set&lt;MaterialState&gt; states) {\n    if (states.contains(MaterialState.selected)) {\n        return AppColors.secondary;\n    } else if (states.contains(MaterialState.hovered)) {\n        return AppColors.splash;\n    }\n    return AppColors.fillPrimary;\n    }),\n),\n</code></pre>"},{"location":"documentation/component/comunication/dialog/","title":"Dialog","text":"<p>Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.</p>"},{"location":"documentation/component/comunication/dialog/#confirm","title":"Confirm","text":"DesignImplementation   <p>Dialog confirm default</p>  <p>Useing Properties <code>content</code></p>    <p>Dialog confirm default <pre><code>AppDialog.confirm(\n    context: context,\n    title: 'Dialog Title',\n    description: 'Phasellus consectetur facilisis',\n    submitted: 'Yes',\n    onSubmitted: () {},\n),\n</code></pre></p> <p>Useing Properties <code>content</code> <pre><code>AppDialog.confirm(\n    context: context,\n    title: 'Change roles',\n    description: 'Are you sure you want to change the role for user Nanang?',\n    content:  TextFieldDropdown(\n        onChanged: (String value) {},\n        hint: 'Select Role',\n        selectedItem: 'Manager',\n        items: const ['Admin', 'Manager', 'User'],\n    ),\n    submitted: 'Save',\n    onSubmitted: () {},\n)\n</code></pre></p>  <p>Constructors</p> <ul> <li><code>content</code> Defines the the Widget on below <code>description</code></li> <li><code>submitted</code> Defines the text for the button submit.</li> <li><code>back</code> Defines the text for the button cancel.</li> <li><code>isDismiss</code> If <code>false</code> the dialog cannot be closed.</li> <li><code>submittedColor</code> Defines the color for the button submit.</li> </ul>"},{"location":"documentation/component/comunication/dialog/#detail","title":"Detail","text":"DesignImplementation      <pre><code>AppDialog.detail(\n  context: context,\n  title: 'Detail User',\n  imageUrl: AppImages.avatarUrl,\n  content: const [TypeFilterForm()],\n  onSubmitted: () {},\n  onReset: () {},\n)\n</code></pre>  <p>Constructors</p> <ul> <li><code>content</code> put [ListRowBasic] inside these properties.</li> <li><code>imageUrl</code> put url address image type <code>String</code></li> <li><code>onDelete</code> If the property is <code>null</code> then the delete button is hidden.</li> <li><code>onSubmitted</code> If the property is <code>null</code> then the edit button is hidden.</li> <li><code>isDismiss</code> If <code>false</code> the dialog cannot be closed.</li> <li><code>heightReduce</code> set height Dialog <code>(Height Screen / 1.2) - heightReduce</code></li> </ul>"},{"location":"documentation/component/comunication/dialog/#form","title":"Form","text":"DesignImplementation      <pre><code>AppDialog.form(\n  context: context,\n  title: 'Create new Type',\n  content: const TypeAddForm(),\n  onSubmitted: () {},\n)\n</code></pre>  <p>Constructors</p> <ul> <li><code>content</code> put List Form input on the properties</li> <li><code>isDismiss</code> If <code>false</code> the dialog cannot be closed.</li> <li><code>heightReduce</code> set height Dialog <code>(Height Screen / 1.2) - heightReduce</code></li> </ul>"},{"location":"documentation/component/comunication/dialog/#filter","title":"Filter","text":"DesignImplementation      <pre><code>AppDialog.filter(\n  context: context,\n  title: 'Fitler Type',\n  content: const TypeFilterForm(),\n  onSubmitted: () {},\n  onReset: () {},\n)\n</code></pre>  <p>Constructors</p> <ul> <li><code>content</code> put List Form input on the properties</li> <li><code>isDismiss</code> If <code>false</code> the dialog cannot be closed.</li> <li><code>heightReduce</code> set height Dialog <code>(Height Screen / 1.2) - heightReduce</code></li> </ul>"},{"location":"documentation/component/comunication/dialog/#import","title":"Import","text":"DesignImplementation      <pre><code>AppDialog.import(\n  context: context,\n  title: 'Import kartu',\n  description: 'Silahkan masukukan file Excel ke sini. Pastikan data sesuai dengan template.',\n  content: TextFieldPicker(\n    fileType: FileType.media,\n    onDone: (i) {},\n  ),\n  onSubmitted: () {},\n  onDownload: () {},\n),\n</code></pre>  <p>Constructors</p> <ul> <li><code>content</code> put the Widget <code>TextFieldPicker</code></li> <li><code>isDismiss</code> If <code>false</code> the dialog cannot be closed.</li> </ul>"},{"location":"documentation/component/comunication/progress_indicator/","title":"Progress Indicators","text":"<p>Progress indicators express an unspecified wait time or display the length of a process.</p>"},{"location":"documentation/component/comunication/snackbar/","title":"Snackbars","text":"<p>Snackbars provide brief messages about app processes at the bottom of the screen.</p> DesignImplementation   <p>Snackbar Mobile</p>  <p>Snackbar Website</p>    <pre><code>Fluttertoast.showToast(\n    msg: 'This item already exist',\n    toastLength: Toast.LENGTH_SHORT,\n);\n</code></pre>  <p>To cancel all the toasts call</p> <pre><code>Fluttertoast.cancel();\n</code></pre>"},{"location":"documentation/component/comunication/snackbar/#support-packages","title":"Support Packages","text":"<p>Info</p> <p>The Menorah library uses the <code>fluttertoast</code> package to call <code>snackbar</code>. For more can be learned in Pub Dev.</p>"},{"location":"documentation/fundation/feature/","title":"Feature Layer","text":""},{"location":"documentation/fundation/solid/","title":"Design Architecture","text":"<p>Menoreh library use the design pattern SOLID Principle.</p> <p>We split the project into multiple packages in order to maintain explicit dependencies for each package with clear boundaries that enforce the single responsibility principle. Modularizing our project like this has many benefits including but not limited to:</p> <ul> <li>Easy to reuse packages across multiple projects</li> <li>CI/CD improvements in terms of efficiency (run checks on only the code that has changed)</li> <li>Easy to maintain the packages in isolation with their dedicated test suites, semantic versioning, and release cycle/cadence</li> </ul> <p>Layering our code is incredibly important and helps us iterate quickly and with confidence. Each layer has a single responsibility and can be used and tested in isolation. This allows us to keep changes contained to a specific layer in order to minimize the impact on the entire application. In addition, layering our application allows us to easily reuse libraries across multiple projects (especially with respect to the data layer).</p>  <p>To use this library you have to understand</p> <ul> <li>Solid Principle</li> <li>Bloc State management</li> <li>Get It</li> <li>Equatable</li> <li>Dartz</li> </ul>"},{"location":"documentation/fundation/solid/#architecture","title":"Architecture","text":""},{"location":"documentation/fundation/solid/#feature-layer","title":"Feature Layer","text":"<p>This layer contains all of the application-specific features and use cases. Each feature generally consists of some UI and business logic. Features should generally be independent of other features so that they can easily be added/removed without impacting the rest of the codebase. Within each feature, the state of the feature along with any business logic is managed by blocs. Blocs interact with zero or more repositories. Blocs react to events and emit states which trigger changes in the UI. Widgets within each feature should generally only depend on the corresponding bloc and render UI based on the current state. The UI can notify the bloc of user input via events.1</p> <pre><code>\u251c\u2500\u2500 lib\n\u2502   \u251c\u2500\u2500 core\n\u2502   \u2502   \u251c\u2500\u2500 extensions\n\u2502   \u2502   \u251c\u2500\u2500 languages\n\u2502   \u2502   \u251c\u2500\u2500 themes\n\u2502   \u2502   \u251c\u2500\u2500 utils\n\u2502   \u2502   \u2514\u2500\u2500 values\n\u2502   \u2514\u2500\u2500 presentation\n\u2502       \u251c\u2500\u2500 routes\n\u2502       \u251c\u2500\u2500 widgets\n\u2502       \u251c\u2500\u2500 bloc\n\u2502       \u2514\u2500\u2500 pages\n\u2502           \u251c\u2500\u2500 main\n\u2502           \u2514\u2500\u2500 app\n\u251c\u2500\u2500 packages\n\u2502   \u251c\u2500\u2500 menoreh_domain\n\u2502   \u2514\u2500\u2500 menoreh_data\n\u251c\u2500\u2500 assets\n\u2514\u2500\u2500 test\n</code></pre>"},{"location":"documentation/fundation/solid/#domain-layer","title":"Domain layer","text":"<p>This layer combines one or more data providers and applies \"business rules\" to the data. Each component in this layer is called a repository and each repository generally manages a single domain. Packages in the repository layer should generally only interact with the data layer.1</p> <pre><code>\u251c\u2500\u2500 lib\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u251c\u2500\u2500 entities\n\u2502       \u251c\u2500\u2500 repositories\n\u2502       \u2514\u2500\u2500 usecases\n\u2514\u2500\u2500 test\n</code></pre>"},{"location":"documentation/fundation/solid/#data-layer","title":"Data layer","text":"<p>This layer is the lowest layer and is responsible for retrieving raw data from external sources such as a databases, APIs, and more. Packages in the data layer generally should not depend on any UI and can be reused and even published on pub.dev as a standalone package.1</p> <pre><code>\u251c\u2500\u2500 lib\n\u2502   \u251c\u2500\u2500 core\n\u2502   \u2502   \u251c\u2500\u2500 config\n\u2502   \u2502   \u251c\u2500\u2500 exception\n\u2502   \u2502   \u251c\u2500\u2500 failure\n\u2502   \u2502   \u251c\u2500\u2500 usecase\n\u2502   \u2502   \u2514\u2500\u2500 values\n\u2502   \u251c\u2500\u2500 helper\n\u2502   \u251c\u2500\u2500 service\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u251c\u2500\u2500 datasource\n\u2502       \u251c\u2500\u2500 models\n\u2502       \u2514\u2500\u2500 repositories\n\u2514\u2500\u2500 test\n</code></pre>   <ol> <li> <p>bloclibrary.dev \u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"documentation/theming/","title":"Themeing","text":"<p>Theme Menoreh mengacu pada matrial design dimana Anda bisa mengubah theme di <code>app/theme</code></p>"}]}